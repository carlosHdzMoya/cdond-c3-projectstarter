version: 2.1

orbs:
  slack: circleci/slack@4.0.2

### It's a good practice to keep your commands at the top of the config file. In this project, you'll need at least 2 commands:

# commands:
#   destroy-environment:
#     description: Destroy backend and frontend cloudformation stacks given a workflow ID.
#     ...

#   revert-migration:
#     description: Revert the last migration if successfully run in the current workflow.
#     ...

jobs:

#  build-frontend:
  buildFrontEnd:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - run:
            name: BUILD frontend
            command: |
              cd frontend
              npm i
              npm run build
        - slack/notify:
            event: fail
            template: basic_fail_1
#  build-backend:
  buildBackEnd:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - run:
            name: BUILD backend 
            command: |
              cd backend
              npm i
              npm run build
        - slack/notify:
            event: fail
            template: basic_fail_1 
#  test-frontend:
  testFrontEnd:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout     
      - run:
          name: TEST frontend
          command: |
            cd frontend
            npm i
            npm install oauth-sign
            npm run test
      - store_test_results:
          path: frontend
#  test-backend:
  testBackEnd:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: TEST backend
          command: |
            cd backend
            npm i
            npm run test   
      - store_test_results:
          path: backend
#  scan-frontend:
  auditFrontEnd:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: AUDIT frontend
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force
#  scan-backend:
  auditBackEnd:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: AUDIT backend
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force

#  deploy-infrastructure:

#  configure-infrastructure:

#  run-migrations:

#  deploy-frontend:

#  deploy-backend:  

#  smoke-test:

#  cloudfront-update:

workflows:
  default:
    jobs:
      - buildFrontEnd
      - buildBackEnd
      - testFrontEnd:
          requires:
            - buildFrontEnd
      - testBackEnd:
          requires:
            - buildBackEnd
      - auditFrontEnd:
          requires:
            - testFrontEnd
      - auditBackEnd:
          requires:
            - testBackEnd       
      

