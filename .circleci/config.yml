version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
              MIGRATION = $(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7})
              echo "${MIGRATION}" 
              if (( $MIGRATION == 1 ));
              then
                cd ~/project/backend
                npm i
                npm run migration:revert
              fi

jobs:
#  build-frontend:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: BUILD frontend
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

#  build-backend:
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: BUILD backend 
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

#  test-frontend:
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build] 
      - run:
          name: TEST frontend
          command: |
            cd frontend
            npm i
            npm install oauth-sign
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

#  test-backend:
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: TEST backend
          command: |
            cd backend
            npm i
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - store_test_results:
          path: backend

#  scan-frontend:
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: AUDIT frontend
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

#  scan-backend:
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: AUDIT backend
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

#  deploy-infrastructure:
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip   
      - run:
          name: DEPLOY INFRASTRUTURE backend
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople

      - run:
          name: DEPLOY INFRASTRUTURE frontend
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - run:
          name: ADD EC2 INSTANCE to ansible inventory
          command: |
            aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
            root: ~/
            paths:
                - "project/.circleci/ansible/inventory.txt"
      - destroy-environment

#  configure-infrastructure:
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["80:09:79:8b:a0:5e:b4:ea:f0:73:ec:ee:23:03:2f:de"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
      - run:
          name: CONFIGURE server
          command: |
            echo ENVIROMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cat backend/.env

            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment

#  run-migrations:
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run DB Migration
          command: |
            cd backend
            npm i
            npm run migrations = > migrations.txt
            echo ${MIGRATED}
      - run:
          name: Log to memstash
          command: |
            if egrep "has been executed successfully|No migrations are pending" ~/project/backend/migrations.txt
            then
                curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi
      - destroy-environment

#  deploy-frontend:
  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
      - run:
          name: ADD API_URL to env file
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo "API_URL=$API_URL" > frontend/.env
      - run:
          name: BUILD frontend
          command: |
            npm install webpack-dev-server -g
            cd frontend
            npm install
            npm run build
            npm audit fix --audit-level=critical --force
      - run: 
          name: Copy built frontend files to the S3 bucket
          command: |
            aws s3 cp ./frontend/dist s3://udapeople-"${CIRCLE_WORKFLOW_ID:0:7}" --recursive  
      - destroy-environment
      - revert-migrations

# #  deploy-backend:  
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["80:09:79:8b:a0:5e:b4:ea:f0:73:ec:ee:23:03:2f:de"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
      - run:
          name: Configure server
          command: |
            cd backend
            touch .env
            echo ENVIROMENT=production > ".env"
            echo TYPEORM_CONNECTION=postgres >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> ".env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            npm i
            npm run build
            echo "List of contents before deleting: "
            ls -a
            echo "----------------------------------------"
            rm -rf node_modules 
            rm -rf dist
            rm -rf test
            rm README.md 
            echo "List of files and dirs that will be sent to ansible: "
            ls -a
            echo "----------------------------------------"
            mkdir -p ../.circleci/ansible/roles/deploy/files
            cd ../.circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy.yml
      - destroy-environment
      - revert-migrations

#  smoke-test:
  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip nodejs npm curl
            pip install awscli
      - run:
          name: Smoke test backend
          command: |
            export BACKEND_IP=$(aws ec2 --region us-east-1 describe-instances \
                  --filters Name=instance-state-name,Values=running Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
                  --output text)
            echo "Backend IP: ${BACKEND_IP}"      
            EC2_URL="http://${BACKEND_IP}:3030/api/status"
            echo ${EC2_URL}
            curl ${EC2_URL}
            if curl -s ${EC2_URL} | grep "ok"
            then
              exit 0
            else
              exit 1
            fi            
      - run:
          name: Smoke test frontend
          command: |
            APP_URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3.amazonaws.com/index.html#/employees"
            echo ${APP_URL}
            curl ${APP_URL}
            if curl -s ${APP_URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment
      - revert-migrations

#  cloudfront-update:
  cloudfront-update:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["80:09:79:8b:a0:5e:b4:ea:f0:73:ec:ee:23:03:2f:de"]
      - run:
          name: Install dependencies
          command: |
            apk add --update nodejs npm curl bash
            pip install awscli
      - run:
          name: Update cloudfront distribution
          command: |
            set TERM=xterm
            export OLD_WORK_FLOW_ID=$(aws cloudformation list-exports --query "Exports[?Name=='WorkflowID'].Value" --no-paginate --output text)
            echo OLD_WORK_FLOW_ID: "${OLD_WORK_FLOW_ID}"
            
            if [ -n "${OLD_WORK_FLOW_ID}" ]
            then
              echo "Update CloudFront stack"
              aws cloudformation update-stack  \
                --stack-name udapeople-cloudfront \
                --template-body file://./.circleci/files/cloudfront.yml \
                --parameters ParameterKey=WorkflowID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7} \
                --tags 'Key=project,Value=udapeople'
            else              
              echo "Create CloudFront stack"
              aws cloudformation create-stack  \
                --stack-name udapeople-cloudfront \
                --template-body file://./.circleci/files/cloudfront.yml \
                --parameters ParameterKey=WorkflowID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7} \
                --tags 'Key=project,Value=udapeople'            
            fi

#  cleanup
  cleanup:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["80:09:79:8b:a0:5e:b4:ea:f0:73:ec:ee:23:03:2f:de"]
      - run:
          name: Install dependencies
          command: |
            apk add --update nodejs npm curl bash
            pip install awscli
      - run:
          name: Cleanup old S3 bucket rontend and backend stack
          command: |
            set TERM=xterm
            export OLD_WORK_FLOW_ID=$(aws cloudformation list-exports --query "Exports[?Name=='WorkflowID'].Value" --no-paginate --output text)
            echo OLD_WORK_FLOW_ID: "${OLD_WORK_FLOW_ID}"
            
            if [ -n "${OldWorkflowID}" ]
            then
              echo Cleanup old S3 bucket frontend and backend stack
              aws s3 rm s3://udapeople-frontend-${OldWorkflowID}/ --recursive
              aws cloudformation delete-stack --stack-name udapeople-frontend-${OldWorkflowID}          
              aws cloudformation delete-stack --stack-name udapeople-backend-${OldWorkflowID}
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
