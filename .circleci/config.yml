version: 2.1

orbs:
  slack: circleci/slack@4.0.2

### It's a good practice to keep your commands at the top of the config file. In this project, you'll need at least 2 commands:

commands:
#   destroy-environment:
#     description: Destroy backend and frontend cloudformation stacks given a workflow ID.
#     ...

#   revert-migration:
#     description: Revert the last migration if successfully run in the current workflow.
#     ...
  create-env-file:
    description: CREATE env file
    steps:
      - run:
          name: Add env variables
          command: |
            echo "NODE_ENV=production" >> backend/.env
            echo "VERSION=1" >> backend/.env
            echo "TYPEORM_CONNECTION=${TYPEORM_CONNECTION}" >> backend/.env
            echo "TYPEORM_MIGRATIONS_DIR=${TYPEORM_MIGRATIONS_DIR}" >> backend/.env
            echo "TYPEORM_ENTITIES=${TYPEORM_ENTITIES}" >> backend/.env
            echo "TYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS}" >> backend/.env
            echo "TYPEORM_HOST=${TYPEORM_HOST}" >> backend/.env
            echo "TYPEORM_PORT=${TYPEORM_PORT}" >> backend/.env
            echo "TYPEORM_USERNAME=${TYPEORM_USERNAME}" >> backend/.env
            echo "TYPEORM_PASSWORD=${TYPEORM_PASSWORD}" >> backend/.env
            echo "TYPEORM_DATABASE=${TYPEORM_DATABASE}" >> backend/.env  

jobs:
#  build-frontend:
  buildFrontEnd:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: BUILD frontend
          command: |
            cd frontend
            npm i
            npm run build
      - slack/notify:
          event: fail
          template: basic_fail_1
#  build-backend:
  buildBackEnd:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: BUILD backend 
          command: |
            cd backend
            npm i
            npm run build
      - slack/notify:
          event: fail
          template: basic_fail_1 
#  test-frontend:
  testFrontEnd:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout     
      - run:
          name: TEST frontend
          command: |
            cd frontend
            npm i
            npm install oauth-sign
            npm run test
      - store_test_results:
          path: frontend
#  test-backend:
  testBackEnd:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: TEST backend
          command: |
            cd backend
            npm i
            npm run test   
      - store_test_results:
          path: backend
#  scan-frontend:
  auditFrontEnd:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: AUDIT frontend
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force
#  scan-backend:
  auditBackEnd:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: AUDIT backend
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force

#  deploy-infrastructure:
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip   
      - run:
          name: DEPLOY INFRASTRUTURE backend
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - run:
          name: DEPLOY INFRASTRUTURE frontend
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - run:
          name: ADD EC2 INSTANCE to ansible inventory
          command: |
            echo "[all]" > .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
            root: ~/
            paths:
                - "project/.circleci/ansible/inventory.txt"
#  configure-infrastructure:
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["80:09:79:8b:a0:5e:b4:ea:f0:73:ec:ee:23:03:2f:de"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - create-env-file
      - run:
          name: CONFIGURE server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
#  run-migrations:
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - create-env-file
      - run:
          name: MIGRATIONS
          command: |
            cd backend
            npm i
            npm run migrations > migrations.txt
            cat migrations.txt     
      - run:
          name: SAVE status to memstash
          command: |        
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}"  --request PUT \
              --data $( grep -c "has been executed successfully" migrations.txt ) \
              https://api.memstash.io/values/migration_completion

#  deploy-frontend:
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: ADD API_URL to env file
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress')
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL=$API_URL" >> frontend/.env
            echo "${API_URL}"
      - run:
          name: BUILD frontend
          command: |
            npm install webpack-dev-server -g
            cd frontend
            npm i
            npm run build
      - run: 
          name: COPY BUILD frontend to the S3 bucket
          command: |
            aws s3 cp ./frontend/dist s3://udapeople-frontend-"${CIRCLE_WORKFLOW_ID:0:7}" --recursive
#  deploy-backend:  
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["80:09:79:8b:a0:5e:b4:ea:f0:73:ec:ee:23:03:2f:de"]
      - attach_workspace:
          at: ~/
      - create-env-file
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt deploy.yml
#  smoke-test:

#  cloudfront-update:

workflows:
  default:
    jobs:
      # - buildFrontEnd
      # - buildBackEnd
      # - testFrontEnd:
      #     requires:
      #       - buildFrontEnd
      # - testBackEnd:
      #     requires:
      #       - buildBackEnd
      # - auditFrontEnd:
      #     requires:
      #       - testFrontEnd
      # - auditBackEnd:
      #     requires:
      #       - testBackEnd
      - deploy-infrastructure:
          requires: [auditFrontEnd,auditBackEnd]
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - run-migrations:
          requires:
            - configure-infrastructure
      - deploy-frontend:
          requires:
            - configure-infrastructure
      - deploy-backend:
          requires:
            - configure-infrastructure
